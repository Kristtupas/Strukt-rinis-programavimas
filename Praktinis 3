#include <iostream>
#include <string>

class VigenereCipher {
private:
    std::string alphabet = "AĄBCČDEĘĖFGHIĮYJKLMNOPRSŠTUŲŪVZŽ";

public:
    // Šifravimas abėcėlės koduote
    std::string encryptAlphabet(const std::string& text, const std::string& key) {
        std::string encrypted = "";
        int textLen = text.length();
        int keyLen = key.length();

        for (int i = 0; i < textLen; ++i) {
            char textChar = std::toupper(text[i]);
            char keyChar = std::toupper(key[i % keyLen]);

            auto textPos = alphabet.find(textChar);
            auto keyPos = alphabet.find(keyChar);

            if (textPos != std::string::npos) {
                int newPos = (textPos + keyPos) % alphabet.length();
                encrypted += alphabet[newPos];
            } else {
                encrypted += textChar;
            }
        }

        return encrypted;
    }

    // Dešifravimas abėcėlės koduote
    std::string decryptAlphabet(const std::string& encrypted, const std::string& key) {
        std::string decrypted = "";
        int encryptedLen = encrypted.length();
        int keyLen = key.length();

        for (int i = 0; i < encryptedLen; ++i) {
            char encryptedChar = std::toupper(encrypted[i]);
            char keyChar = std::toupper(key[i % keyLen]);

            auto encryptedPos = alphabet.find(encryptedChar);
            auto keyPos = alphabet.find(keyChar);

            if (encryptedPos != std::string::npos) {
                int originalPos = (encryptedPos - keyPos + alphabet.length()) % alphabet.length();
                decrypted += alphabet[originalPos];
            } else {
                decrypted += encryptedChar;
            }
        }

        return decrypted;
    }

    // Šifravimas ASCII koduote
    std::string encryptASCII(const std::string& text, const std::string& key) {
        std::string encrypted = "";
        int textLen = text.length();
        int keyLen = key.length();

        for (int i = 0; i < textLen; ++i) {
            // Šifruojame tik spausdinamus ASCII simbolius (32-126)
            if (text[i] >= 32 && text[i] <= 126) {
                char encryptedChar = ((text[i] - 32 + key[i % keyLen] - 32) % 95) + 32;
                encrypted += encryptedChar;
            } else {
                encrypted += text[i];
            }
        }

        return encrypted;
    }

    // Dešifravimas ASCII koduote
    std::string decryptASCII(const std::string& encrypted, const std::string& key) {
        std::string decrypted = "";
        int encryptedLen = encrypted.length();
        int keyLen = key.length();

        for (int i = 0; i < encryptedLen; ++i) {
            // Dešifruojame tik spausdinamus ASCII simbolius (32-126)
            if (encrypted[i] >= 32 && encrypted[i] <= 126) {
                char decryptedChar = ((encrypted[i] - 32 - (key[i % keyLen] - 32) + 95) % 95) + 32;
                decrypted += decryptedChar;
            } else {
                decrypted += encrypted[i];
            }
        }

        return decrypted;
    }
};

// Pagrindinis meniu
void showMenu() {
    std::cout << "\n--- Vigenere Šifravimas ---\n";
    std::cout << "1. Šifruoti tekstą (Abėcėlė)\n";
    std::cout << "2. Dešifruoti tekstą (Abėcėlė)\n";
    std::cout << "3. Šifruoti tekstą (ASCII)\n";
    std::cout << "4. Dešifruoti tekstą (ASCII)\n";
    std::cout << "5. Baigti programą\n";
    std::cout << "Pasirinkite veiksmą: ";
}

int main() {
    VigenereCipher cipher;
    int choice;
    std::string text, key;

    while (true) {
        showMenu();
        std::cin >> choice;
        std::cin.ignore(); // Išvalo Enter klavišą

        switch (choice) {
            case 1: 
                std::cout << "Įveskite tekstą šifravimui (Abėcėlė): ";
                std::getline(std::cin, text);
                std::cout << "Įveskite raktą: ";
                std::getline(std::cin, key);
                std::cout << "Užšifruotas tekstas: " 
                          << cipher.encryptAlphabet(text, key) << std::endl;
                break;

            case 2:
                std::cout << "Įveskite tekstą dešifravimui (Abėcėlė): ";
                std::getline(std::cin, text);
                std::cout << "Įveskite raktą: ";
                std::getline(std::cin, key);
                std::cout << "Dešifruotas tekstas: " 
                          << cipher.decryptAlphabet(text, key) << std::endl;
                break;

            case 3:
                std::cout << "Įveskite tekstą šifravimui (ASCII): ";
                std::getline(std::cin, text);
                std::cout << "Įveskite raktą: ";
                std::getline(std::cin, key);
                std::cout << "Užšifruotas tekstas: " 
                          << cipher.encryptASCII(text, key) << std::endl;
                break;

            case 4:
                std::cout << "Įveskite tekstą dešifravimui (ASCII): ";
                std::getline(std::cin, text);
                std::cout << "Įveskite raktą: ";
                std::getline(std::cin, key);
                std::cout << "Dešifruotas tekstas: " 
                          << cipher.decryptASCII(text, key) << std::endl;
                break;

            case 5:
                std::cout << "Programa baigta.\n";
                return 0;

            default:
                std::cout << "Neteisingas pasirinkimas!\n";
        }
    }

    return 0;
}
